{"version":3,"sources":["kernel/controls/catalog-autocomplete.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA4E;AAC5E,sCAAyE;AACzE,uCAAqC;AACrC,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sCAAqC;AACrC,oCAAuC;AAEvC,EAAE;AAQF,IAAa,4BAA4B;IAQrC,EAAE;IAEF,sCAA6B,IAAU,EAAU,OAAgB;QAApC,SAAI,GAAJ,IAAI,CAAM;QAAU,YAAO,GAAP,OAAO,CAAS;QAJxD,aAAQ,GAAW,CAAC,CAAC;QACrB,kBAAa,GAAW,EAAE,CAAC;IAKpC,CAAC;IAED,+CAAQ,GAAR;QACI,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,yBAAyB;QACzB,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC;QACzD,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC;QAC/B,iCAAiC;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,mBAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACpG,EAAE;QACF,IAAI,CAAC,YAAY,CAAC,mBAAmB,GAAG,UAAU,KAAa,EAAE,GAAW,EAAE,QAAa;YACvF,IAAI,MAAuB,CAAC;YAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,SAAS,CAAC;gBAC7B,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;YAC7B,IAAI,CAAC,CAAC;gBACF,MAAM,GAAG,IAAI,sBAAe,EAAE,CAAC;gBAC/B,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC7E,CAAC;YACD,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAC7B,EAAE;YACF,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC;iBAC5C,GAAG,CAAC,UAAA,QAAQ;gBACT,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAmB,CAAA;YAC3C,CAAC,CAAC;iBACD,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC;iBAC9B,KAAK,CAAC,UAAA,MAAM;gBACT,QAAQ,CAAC,IAAI,CAAC,CAAA;YAClB,CAAC,CAAC,CAAC;QACX,CAAC,CAAA;IACL,CAAC;IACL,mCAAC;AAAD,CA3CA,AA2CC,IAAA;AAzC8B;IAA1B,gBAAS,CAAC,cAAc,CAAC;8BAAe,0BAAY;kEAAC;AAE7C;IAAR,YAAK,EAAE;;gEAAoB;AACnB;IAAR,YAAK,EAAE;8BAAa,sBAAe;gEAAC;AAC5B;IAAR,YAAK,EAAE;;8DAAsB;AACrB;IAAR,YAAK,EAAE;;mEAA4B;AAP3B,4BAA4B;IANxC,gBAAS,CAAC;QACP,QAAQ,EAAE,MAAM,CAAC,EAAE;QACnB,QAAQ,EAAE,6BAA6B;QACvC,WAAW,EAAE,uCAAuC;QACpD,SAAS,EAAE,CAAC,sCAAsC,CAAC;KACtD,CAAC;qCAWqC,WAAI,EAAmB,iBAAO;GAVxD,4BAA4B,CA2CxC;AA3CY,oEAA4B","file":"catalog-autocomplete.component.js","sourcesContent":["import { Component, Input, Output, ViewChild, OnInit } from '@angular/core';\r\nimport { Headers, Http, Response, URLSearchParams } from '@angular/http';\r\nimport 'rxjs/add/operator/toPromise';\r\n//\r\nimport { AutoComplete } from 'wijmo/wijmo.input';\r\n//\r\nimport { Context } from '../context';\r\nimport { WebService } from '../webapi';\r\nimport { CatalogItem } from '../entities';\r\n//\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'azteca-catalog-autocomplete',\r\n    templateUrl: './catalog-autocomplete.component.html',\r\n    styleUrls: ['./catalog-autocomplete.component.css']\r\n})\r\nexport class CatalogAutocompleteComponent {\r\n    apiService: WebService;\r\n    @ViewChild('autocomplete') autocomplete: AutoComplete;\r\n    //\r\n    @Input() serviceUrl: string;\r\n    @Input() parameters: URLSearchParams;\r\n    @Input() maxItems: number = 2;\r\n    @Input() displayMember: string = \"\";\r\n    //\r\n\r\n    public constructor(protected http: Http, private context: Context) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        var self = this;\r\n        //Configurar autocomplete\r\n        this.autocomplete.displayMemberPath = this.displayMember;\r\n        this.autocomplete.maxItems = 2;\r\n        //Crear referencia a servicio web\r\n        this.apiService = new WebService(this.http, this.serviceUrl + '/' + this.context.session.sessionID);\r\n        //\r\n        this.autocomplete.itemsSourceFunction = function (query: string, max: number, callback: any) {\r\n            let params: URLSearchParams;\r\n            if (self.parameters != undefined)\r\n                params = self.parameters;\r\n            else {\r\n                params = new URLSearchParams();\r\n                params.set('idBranch', self.context.app.defaultSite.identity.toString());\r\n            }\r\n            params.set(\"keyword\", query);\r\n            //\r\n            self.apiService.getData('search-keyword', params)\r\n                .map(response => {\r\n                    return response.json() as CatalogItem[]\r\n                })\r\n                .toPromise()\r\n                .then(items => callback(items))\r\n                .catch(reason => {\r\n                    callback(null)\r\n                });\r\n        }\r\n    }\r\n}"]}