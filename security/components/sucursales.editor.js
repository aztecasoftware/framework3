"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const core_1 = require('@angular/core');
const router_1 = require('@angular/router');
const forms_1 = require('@angular/forms');
const common_1 = require('@angular/common');
//
const index_1 = require('../../index');
const index_2 = require('../../editors/index');
//
const sucursal_1 = require('../models/sucursal');
const sucursal_service_1 = require('../services/sucursal.service');
const empresa_service_1 = require('../services/empresa.service');
let SucursalesEditor_1 = class SucursalesEditor extends index_2.CatalogEditor {
    constructor(context, router, route, location, formBuilder, changeDetector, sucursalService, empresaService) {
        super(context, changeDetector);
        this.context = context;
        this.router = router;
        this.route = route;
        this.location = location;
        this.formBuilder = formBuilder;
        this.changeDetector = changeDetector;
        this.sucursalService = sucursalService;
        this.empresaService = empresaService;
        this.sucursal = new sucursal_1.SucursalInfo();
        this.catalogForm = formBuilder.group({
            'codigo': ['', forms_1.Validators.required],
            'nombre': ['', forms_1.Validators.required],
            'nombreLargo': [''],
            'calle': [''],
            'numExt': [''],
            'numInt': [''],
            'colonia': [''],
            'cp': [''],
            'poblacion': [0],
            'telefono1': [''],
            'telefono2': [''],
            'fax': [''],
            'paginaWeb': [''],
            'correo': ['']
        });
    }
    onConfigureCatalog(options) {
        this.route.params.forEach((params) => {
            this.idEmpresa = +params['idEmpresa'];
        });
        this.autogeneratedCode = options.codigoAutogenerado;
    }
    onCreatingItem() {
        //Asignar y cargar datos de la empresa que dependerá la sucursal
        this.sucursal.idCompany = this.idEmpresa;
        this.empresaService.getDetailFromCache(this.idEmpresa)
            .then(empresa => this.sucursal.empresa = empresa)
            .catch(error => this.handleError(error));
    }
    onViewingItem(id) {
        this.context.app.showSpinner();
        this.sucursalService.getDetailByID(id)
            .then(info => {
            this.context.app.hideSpinner();
            this.sucursal = info;
            this.setReadonlyMode();
        })
            .catch(error => this.handleError(error));
    }
    onCloningItem(id) {
        this.context.app.showSpinner();
        //
        this.sucursalService.clone(id)
            .then(info => {
            this.context.app.hideSpinner();
            this.sucursal = info;
        })
            .catch(error => this.handleError(error));
    }
    onLoadingItem(id) {
        this.context.app.showSpinner();
        this.sucursalService.getDetailByID(id)
            .then(info => {
            this.context.app.hideSpinner();
            this.sucursal = info;
        })
            .catch(error => this.handleError(error));
    }
    onSavingItem(args) {
        this.context.app.showSpinner();
        this.sucursalService.update(this.sucursal)
            .then(info => {
            this.context.app.hideSpinner();
            this.sucursal = info;
            if (args.closeEditor)
                this.location.back();
            else
                this.showAlert('La información ha sido actualizada con éxito', 'success');
        })
            .catch(error => this.handleError(error));
    }
    //Manejo de miembros
    selectMiembrosTab() {
    }
};
let SucursalesEditor = SucursalesEditor_1;
SucursalesEditor = SucursalesEditor_1 = __decorate([
    core_1.Component({
        selector: 'azteca-sucursales-editor',
        templateUrl: './sucursales.editor.html',
        providers: [
            {
                provide: index_1.BaseComponent, useExisting: core_1.forwardRef(() => SucursalesEditor)
            },
            {
                provide: index_1.CatalogService, useExisting: sucursal_service_1.SucursalService
            }
        ]
    }), 
    __metadata('design:paramtypes', [index_1.Context, router_1.Router, router_1.ActivatedRoute, common_1.Location, forms_1.FormBuilder, core_1.ChangeDetectorRef, sucursal_service_1.SucursalService, empresa_service_1.EmpresaService])
], SucursalesEditor);
exports.SucursalesEditor = SucursalesEditor;
//# sourceMappingURL=sucursales.editor.js.map