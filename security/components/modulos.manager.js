"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//Frameworks
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
//
const index_1 = require("../../index");
const index_2 = require("../../editors/index");
const index_3 = require("../../controls/index");
//
const modulo_1 = require("../models/modulo");
const modulo_service_1 = require("../services/modulo.service");
let ModulosManager = ModulosManager_1 = class ModulosManager extends index_2.HierarchyManager {
    constructor(context, changeDetector, moduloService, formBuilder) {
        super(context, changeDetector);
        this.context = context;
        this.changeDetector = changeDetector;
        this.moduloService = moduloService;
        this.formBuilder = formBuilder;
        this.moduloEdicion = new modulo_1.ModuloInfo();
        this.categorias = [];
        this.nodeForm = formBuilder.group({
            'codigo': ['', forms_1.Validators.required],
            'nombre': ['', forms_1.Validators.required],
            'imagen': [''],
            'idCategoria': [0, index_3.AztecaValiators.selected],
            'descripcion': ['']
        });
    }
    onConfigureCatalog(options) {
        this.autogeneratedCode = options.codigoAutogenerado;
        this.loadHierarchy();
        this.loadCategorias();
    }
    loadHierarchy() {
        this.context.app.showSpinner();
        this.moduloService.loadHierarchy(this.context.app.defaultCompany.identity)
            .then(nodes => {
            this.context.app.hideSpinner();
            this.modulos = nodes;
        })
            .catch(error => this.handleError(error));
    }
    onNodesChanged(modulos) {
        this.modulos = modulos;
    }
    onCurrentNodeChanged(node) {
        this.currentNode = node;
    }
    onCreatingNode(parentNode) {
        this.moduloEdicion = new modulo_1.ModuloInfo(); //Crear nueva instancia para evitar que reset modifique la información del último nodo en edición
        this.nodeForm.reset();
        this.moduloEdicion = new modulo_1.ModuloInfo(); //Se vuelve a crear instancia para evitar valores nulos creados por reset
        this.currentParent = parentNode;
        this.showEditor();
    }
    onEditingNode(node) {
        this.moduloEdicion = this.moduloService.copy(node.data);
        this.showEditor();
    }
    onSavingNode() {
        //Si es un nuevo nodo
        if (this.moduloEdicion.clientID == 0) {
            this.addNode(this.moduloEdicion, this.currentParent);
        }
        else {
            this.updateNode(this.moduloEdicion);
        }
        this.hideEditor();
    }
    onDeletingNode(node) {
        this.deleteNode(node);
    }
    onSavingHierarchy(changes) {
        this.context.app.showSpinner();
        this.moduloService.saveHierarchy(changes)
            .then(modulos => {
            this.modulos = modulos;
            this.reset();
            this.context.app.hideSpinner();
            this.showAlert('Los cambios han sido guardados con éxito.', 'success');
        })
            .catch(error => this.handleError(error));
    }
    loadCategorias() {
        this.moduloService.loadCategories()
            .then(categorias => {
            categorias.unshift({ idModuloCategoria: 0, nombre: '[Seleccione]' });
            this.categorias = categorias;
        })
            .catch(error => this.handleError(error));
    }
};
ModulosManager = ModulosManager_1 = __decorate([
    core_1.Component({
        selector: 'security-modulos-manager',
        template: `
      <azteca-hierarchy-manager (configureCatalog)="onConfigureCatalog($event)"
                                (currentNodeChanged)="onCurrentNodeChanged($event)"
                                (creatingNode)="onCreatingNode($event)"
                                (editingNode)="onEditingNode($event)"
                                (savingNode)="onSavingNode()"
                                (deletingNode)="onDeletingNode($event)"
                                (savingHierarchy)="onSavingHierarchy($event)"
                                (nodesChanged)="onNodesChanged($event)"
                                [title]="'Administración de módulos del sistema'"
                                [validForm]="nodeForm.valid"
                                [currentNode]="currentNode"                          
                                [nodes]="modulos">

          <!------------------- Menu de acciones adicionales --------------------->
          <azteca-menu-item [name]="'PROCESOS'" [icon]="'glyphicon glyphicon-cog'" [text]="'Procesos'" [smallText]="'editar procesos del módulo'"></azteca-menu-item>

          <!------------------- Formulario de edición  --------------------->
          <form [formGroup]="nodeForm">
              <div class="row">

                  <div class="col-xs-12 col-md-10">
                      <azteca-form-field [label]="'Código:'">
                          <catalog-code formControlName="codigo" [(ngModel)]="moduloEdicion.code" [automatic]="autogeneratedCode"></catalog-code>
                      </azteca-form-field>

                      <label class="control-label">Ruta:</label>
                      <az-label [text]="moduloEdicion.namedPath"></az-label>

                      <azteca-form-field [label]="'Nombre:'">
                          <az-textbox formControlName="nombre" [(ngModel)]="moduloEdicion.nombre"></az-textbox>
                      </azteca-form-field>

                      <azteca-form-field [label]="'Imágen:'">
                          <az-textbox formControlName="imagen" [(ngModel)]="moduloEdicion.imageFile"></az-textbox>
                      </azteca-form-field>

                      <azteca-form-field [label]="'Categoría:'">
                          <az-combobox formControlName="idCategoria" [(ngModel)]="moduloEdicion.idModuloCategoria" [items]="categorias" [displayMember]="'nombre'" [valueMember]="'idModuloCategoria'"></az-combobox>
                      </azteca-form-field>

                      <azteca-form-field [label]="'Descripción:'">
                          <az-textarea formControlName="descripcion" [(ngModel)]="moduloEdicion.descripcion"></az-textarea>
                      </azteca-form-field>

                  </div>
              </div>
          </form>

      </azteca-hierarchy-manager>
    `,
        providers: [
            {
                provide: index_1.BaseComponent, useExisting: core_1.forwardRef(() => ModulosManager_1)
            },
            {
                provide: index_1.CatalogService, useExisting: modulo_service_1.ModuloService
            }
        ]
    }),
    __metadata("design:paramtypes", [index_1.Context, core_1.ChangeDetectorRef, modulo_service_1.ModuloService, forms_1.FormBuilder])
], ModulosManager);
exports.ModulosManager = ModulosManager;
var ModulosManager_1;
