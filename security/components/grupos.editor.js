"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//Frameworks
const core_1 = require('@angular/core');
const router_1 = require('@angular/router');
const forms_1 = require('@angular/forms');
const common_1 = require('@angular/common');
//Azteca Kernel
const index_1 = require('../../index');
const index_2 = require('../../editors/index');
//Locales
const grupo_1 = require('../models/grupo');
const grupo_service_1 = require('../services/grupo.service');
let GruposEditor_1 = class GruposEditor extends index_2.CatalogEditor {
    constructor(context, router, route, location, formBuilder, changeDetector, grupoService) {
        super(context, changeDetector);
        this.context = context;
        this.router = router;
        this.route = route;
        this.location = location;
        this.formBuilder = formBuilder;
        this.changeDetector = changeDetector;
        this.grupoService = grupoService;
        this.grupo = new grupo_1.GrupoInfo();
        this.catalogForm = formBuilder.group({
            'codigo': ['', forms_1.Validators.required],
            'nombre': ['', forms_1.Validators.required]
        });
    }
    onConfigureCatalog(options) {
        this.autogeneratedCode = options.codigoAutogenerado;
    }
    onCreatingItem() {
    }
    onViewingItem(id) {
        this.context.app.showSpinner();
        this.grupoService.getDetailByID(id)
            .then(info => {
            this.context.app.hideSpinner();
            this.grupo = info;
            this.setReadonlyMode();
        })
            .catch(error => this.handleError(error));
    }
    onCloningItem(id) {
        this.context.app.showSpinner();
        //
        this.grupoService.clone(id)
            .then(info => {
            this.context.app.hideSpinner();
            this.grupo = info;
        })
            .catch(error => this.handleError(error));
    }
    onLoadingItem(id) {
        this.context.app.showSpinner();
        this.grupoService.getDetailByID(id)
            .then(info => {
            this.context.app.hideSpinner();
            this.grupo = info;
        })
            .catch(error => this.handleError(error));
    }
    onSavingItem(args) {
        this.context.app.showSpinner();
        this.grupoService.update(this.grupo)
            .then(info => {
            this.context.app.hideSpinner();
            this.grupo = info;
            if (args.closeEditor)
                this.location.back();
            else
                this.showAlert('La información ha sido actualizada con éxito', 'success');
        })
            .catch(error => this.handleError(error));
    }
    onMenuItemClick(item) {
        if (item.name == "USERS") {
            this.router.navigate(['members'], { relativeTo: this.route });
        }
    }
};
let GruposEditor = GruposEditor_1;
GruposEditor = GruposEditor_1 = __decorate([
    core_1.Component({
        selector: 'security-grupos-editor',
        templateUrl: './grupos.editor.html',
        providers: [
            {
                provide: index_1.BaseComponent, useExisting: core_1.forwardRef(() => GruposEditor)
            },
            {
                provide: index_1.CatalogService, useExisting: grupo_service_1.GrupoService
            }
        ]
    }), 
    __metadata('design:paramtypes', [index_1.Context, router_1.Router, router_1.ActivatedRoute, common_1.Location, forms_1.FormBuilder, core_1.ChangeDetectorRef, grupo_service_1.GrupoService])
], GruposEditor);
exports.GruposEditor = GruposEditor;
//# sourceMappingURL=grupos.editor.js.map