"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const core_1 = require("@angular/core");
//
const index_1 = require("../../index");
const catalog_editor_component_1 = require("../components/catalog-editor.component");
const policies_1 = require("../../security/models/policies");
const policy_1 = require("../../security/models/policy");
class CatalogEditor extends index_1.BaseComponent {
    constructor(context, changeDetector) {
        super();
        this.context = context;
        this.changeDetector = changeDetector;
        this.readonlyMode = false;
        this.autogeneratedCode = false;
    }
    ngOnInit() {
        if (!this.catalogForm)
            return;
        this.catalogForm.statusChanges.subscribe(() => {
            //this.editor.valid = this.catalogForm.valid;
            this.changeDetector.detectChanges();
        });
    }
    showAlert(message, type) {
        this.editor.showAlert(message, type);
    }
    handleError(error) {
        this.context.app.hideSpinner();
        this.errorMessage = error.message;
        if (error._body != undefined)
            this.errorMessage = error._body;
        else if (error.statusText != undefined)
            this.errorMessage = error.statusText;
        console.log(this.errorMessage);
        this.editor.showAlert(this.errorMessage, 'danger');
    }
    setReadonlyMode() {
        //Enviar política de sólo lectura a todos los componentes del editor
        let policy = new policy_1.PolicyInfo();
        policy.nombre = policies_1.Policies.enabled;
        policy.valor = "false";
        this.applyPolicy(policy);
        //
        this.readonlyMode = true;
        this.editor.enabled = false;
    }
    //Implementación de políticas
    applyPolicy(policy) {
        if (this.allowPolicies && !this.isPolicyApplied(policy.nombre)) {
            if (policy.nombre.toLowerCase() == policies_1.Policies.enabled) {
                this.children.forEach((item, index) => {
                    item.applyPolicy(policy);
                });
                this.appliedPolicies.push(policy);
            }
        }
    }
}
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], CatalogEditor.prototype, "autogeneratedCode", void 0);
__decorate([
    core_1.ViewChild(catalog_editor_component_1.CatalogEditorComponent),
    __metadata("design:type", catalog_editor_component_1.CatalogEditorComponent)
], CatalogEditor.prototype, "editor", void 0);
exports.CatalogEditor = CatalogEditor;
