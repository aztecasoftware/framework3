{"version":3,"sources":["../../Scripts/app/kernel/editors/catalog-editor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,sCAA6F;AAI7F,uEAAoE;AACpE,oDAAkD;AAClD,iDAAgD;AAChD,6CAAgD;AAEhD;IAA4C,iCAAa;IASrD,uBAAsB,OAAgB;QAAtC,YACI,iBAAO,SACV;QAFqB,aAAO,GAAP,OAAO,CAAS;QANtC,kBAAY,GAAY,KAAK,CAAC;QAErB,uBAAiB,GAAY,KAAK,CAAC;;IAM5C,CAAC;IAED,iCAAS,GAAT,UAAU,OAAe,EAAE,IAAY;QACnC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,mCAAW,GAAX,UAAY,KAAU;QAClB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC;QAClC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,SAAS,CAAC;YACzB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;QACpC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,SAAS,CAAC;YACnC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC;QACzC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,uCAAe,GAAf;QACI,oEAAoE;QACpE,IAAI,MAAM,GAAe,IAAI,mBAAU,EAAE,CAAC;QAC1C,MAAM,CAAC,MAAM,GAAG,mBAAQ,CAAC,OAAO,CAAC;QACjC,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACzB,EAAE;QACF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;IAChC,CAAC;IAED,6BAA6B;IAC7B,mCAAW,GAAX,UAAY,MAAkB;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7D,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,mBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;oBAC9B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACtC,CAAC;QACL,CAAC;IACL,CAAC;IAEL,oBAAC;AAAD,CAnDA,AAmDC,CAnD2C,8BAAa,GAmDxD;AA9CY;IAAR,YAAK,EAAE;;wDAAoC;AAET;IAAlC,gBAAS,CAAC,iDAAsB,CAAC;8BAAS,iDAAsB;6CAAC;AAPhD,sCAAa","file":"catalog-editor.js","sourcesContent":["import { Component, OnInit, ViewChild, ViewChildren, QueryList, Input } from '@angular/core';\r\n//\r\nimport { Context } from '../context';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { CatalogEditorComponent } from './catalog-editor.component';\r\nimport { BaseComponent } from '../base-component';\r\nimport { Policies } from '../security/policies';\r\nimport { PolicyInfo } from '../security/policy';\r\n\r\nexport abstract class CatalogEditor extends BaseComponent {\r\n    errorMessage: string;\r\n    catalogForm: FormGroup;\r\n    readonlyMode: boolean = false;\r\n\r\n    @Input() autogeneratedCode: boolean = false;\r\n\r\n    @ViewChild(CatalogEditorComponent) editor: CatalogEditorComponent;\r\n    \r\n    constructor(protected context: Context) {\r\n        super();\r\n    }\r\n\r\n    showAlert(message: string, type: string) {\r\n        this.editor.showAlert(message, type);\r\n    }\r\n\r\n    handleError(error: any) {\r\n        this.context.app.hideSpinner();\r\n        this.errorMessage = error.message;\r\n        if (error._body != undefined)\r\n            this.errorMessage = error._body;\r\n        else if (error.statusText != undefined)\r\n            this.errorMessage = error.statusText;        \r\n        console.log(this.errorMessage);\r\n        this.editor.showAlert(this.errorMessage, 'danger');\r\n    }\r\n\r\n    setReadonlyMode() {\r\n        //Enviar política de sólo lectura a todos los componentes del editor\r\n        let policy: PolicyInfo = new PolicyInfo();\r\n        policy.nombre = Policies.enabled;\r\n        policy.valor = \"false\";\r\n        this.applyPolicy(policy);\r\n        //\r\n        this.readonlyMode = true;\r\n        this.editor.enabled = false;\r\n    }\r\n\r\n    //Implementación de políticas\r\n    applyPolicy(policy: PolicyInfo): void {\r\n        if (this.allowPolicies && !this.isPolicyApplied(policy.nombre)) {\r\n            if (policy.nombre.toLowerCase() == Policies.enabled) {\r\n                this.children.forEach((item, index) => {\r\n                    item.applyPolicy(policy);                    \r\n                });                \r\n                this.appliedPolicies.push(policy);\r\n            }\r\n        }\r\n    }\r\n\r\n}"]}