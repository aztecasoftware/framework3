"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var catalog_editor_component_1 = require("./catalog-editor.component");
var base_component_1 = require("../base-component");
var policies_1 = require("../security/policies");
var policy_1 = require("../security/policy");
var CatalogEditor = (function (_super) {
    __extends(CatalogEditor, _super);
    function CatalogEditor(context) {
        var _this = _super.call(this) || this;
        _this.context = context;
        _this.readonlyMode = false;
        _this.autogeneratedCode = false;
        return _this;
    }
    CatalogEditor.prototype.showAlert = function (message, type) {
        this.editor.showAlert(message, type);
    };
    CatalogEditor.prototype.handleError = function (error) {
        this.context.app.hideSpinner();
        this.errorMessage = error.message;
        if (error._body != undefined)
            this.errorMessage = error._body;
        else if (error.statusText != undefined)
            this.errorMessage = error.statusText;
        console.log(this.errorMessage);
        this.editor.showAlert(this.errorMessage, 'danger');
    };
    CatalogEditor.prototype.setReadonlyMode = function () {
        //Enviar política de sólo lectura a todos los componentes del editor
        var policy = new policy_1.PolicyInfo();
        policy.nombre = policies_1.Policies.enabled;
        policy.valor = "false";
        this.applyPolicy(policy);
        //
        this.readonlyMode = true;
        this.editor.enabled = false;
    };
    //Implementación de políticas
    CatalogEditor.prototype.applyPolicy = function (policy) {
        if (this.allowPolicies && !this.isPolicyApplied(policy.nombre)) {
            if (policy.nombre.toLowerCase() == policies_1.Policies.enabled) {
                this.children.forEach(function (item, index) {
                    item.applyPolicy(policy);
                });
                this.appliedPolicies.push(policy);
            }
        }
    };
    return CatalogEditor;
}(base_component_1.BaseComponent));
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], CatalogEditor.prototype, "autogeneratedCode", void 0);
__decorate([
    core_1.ViewChild(catalog_editor_component_1.CatalogEditorComponent),
    __metadata("design:type", catalog_editor_component_1.CatalogEditorComponent)
], CatalogEditor.prototype, "editor", void 0);
exports.CatalogEditor = CatalogEditor;

//# sourceMappingURL=catalog-editor.js.map
